
// Locks should not be acquired in a cyclic manner amongst threads 
// (dining philosopher problem). That is, if a thread t1 takes a lock l1
// and then a lock l2 (without having released l1), then at no time should another 
// thread t2 take the locks in reverse order. Obeying this principle will prevent
// cyclic deadlocks.

prop locksDeadlocks :
  Forall t1 . Forall t2 . Forall l1 . Forall l2 .
    (@ [acq(t1,l1),rel(t1,l1)) & acq(t1,l2))
    ->
    (! @ P (@ [acq(t2,l2),rel(t2,l2)) & acq(t2,l1)))